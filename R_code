#Lines 5 through 20 are examples of various file types 
#and the code to read and write them. 
#Your tasks begin at line 22.

#Getting and saving your dataset is typically a two step process
#Read and write a delimited text file.
#datasetname <- read.table(âfile.txtâ)
#write.table(datasetname, âfile.txtâ)

#Read and write a comma separated value file. This is a special case of read.table/ write.table.	
#datasetname <- read.csv(âfile.csvâ)
#write.csv(datasetname, âfile.csvâ)

#Read and write an R data file, a file type special for R.	
#load(âfile.RDataâ)
#save(datasetname, file = âfile.Rdataâ)

#Read and write an R data file from GitHub.
#You need to select 'raw data' on the GitHub page 
#and then copy the URL and put in your code, as below

#TASK: run the code below to get and save the dataset
download.file(url = "https://raw.githubusercontent.com/fivethirtyeight/data/master/airline-safety/airline-safety.csv", destfile = "airline_safety.csv")
#Then you need to name your dataset
airline_safety<- read.csv("airline_safety.csv")

#TASK: take a look at the airline safety data. 
#Replace the ?s with functions that display a sample of the data
head(airline_safety, 2)
#Or
sample(airline_safety)

#TASK: Install and call the dplyr package. 
#Replace the ?s with the functions
install.packages("dplyr")
library(dplyr)

#Let's make a random sample of our data and save it
mysample<-sample_n(airline_safety, size=15, replace = FALSE, weight = NULL, .env = NULL)

#Let's save the new sample as a csv file in our wd
write.csv(mysample,"~/mysample.csv", row.names = FALSE)
#TASK: Check your wd. Is the file there? 
# Yes! it was saved my to my default wd as a CSV file

#Now let's have some fun with *piping*
#we will use our mysample dataset
#The pipe, %>%, comes from the magrittr package. 
#Packages in the tidyverse (like dplyr) load %>% for you automatically, 
#so you donât usually load magrittr explicitly.

#TASK: what other packages are in the tidyverse? answer in a comment: 
# foracts - stringr - tibble - purrr - readr - tidyr - dplyr - ggplot2
# there afre more packages in tidyverse, but those don't load automatically, the others are for more specific use
#Example: Let's try some piping with our mysample data
piping<-mysample %>% 
  mutate (seats = avail_seat_km_per_week) %>%
  subset(incidents_85_99 < 24) %>%
  dim()%>%
  print()

#TASK: revise this code chunk using piping
mysample2<-mysample
arrange(mysample2, airline)
mysample2<-filter(mysample2, incidents_85_99<25)
mysample2<-rename(mysample2, seats = avail_seat_km_per_week)
mysample3<-select(mysample2, incidents_00_14, incidents_85_99)
mysample4<-summary(mysample3)
print(mysample4)

#Piped sample
mysample_pipe<-mysample %>%
  arrange(airline) %>%
  filter(incidents_85_99<25) %>%
  rename(seats = avail_seat_km_per_week) %>%
  select(incidents_00_14, incidents_85_99) %>%
  print()



